{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Parking Lot",

    "Parameters": {
        "App": {
            "Description": "App applied as a tag",
            "Type": "String",
            "Default": "parking-lot"
        },
        "Stack": {
            "Description": "Stack applied as a tag",
            "Type": "String",
            "Default": "parking-lot"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair for SSH access",
            "Type": "String",
            "Default": "bootstrap"
        },
        "Stage": {
            "Description": "Stage applied as a tag",
            "Type": "String",
            "Default": "PROD",
            "AllowedValues": [ "PROD", "CODE" ],
            "ConstraintDescription": "must be a valid stage eg. PROD, CODE"
        },
        "Capacity": {
            "Description": "Autoscale Size",
            "Type": "Number",
            "Default": "3",
            "MinValue": 1,
            "MaxValue": 6
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.medium",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m3.medium",
                "m3.large"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type"
        },
        "ConfigBucket": {
            "Description": "Bucket containing config files",
            "Default": "parking-lot",
            "Type": "String"
        },
        "PackerAMI": {
            "Description": "The AMI used",
            "Type": "String"
        },
        "VpcId": {
            "Description": "ID of the VPC onto which to launch the application eg. vpc-1234abcd",
            "Type": "String"
        },
        "PublicVpcSubnets" : {
            "Description": "Subnets to use in VPC for ELB eg. subnet-abcd1234",
            "Type": "CommaDelimitedList"
        },
        "AlarmSNS": {
            "Description": "Amazon SNS topic for alerts",
            "Default": "arn:aws:sns:eu-west-1:528313740988:parking-lot-notifications",
            "Type": "String"
        }
    },

    "Conditions": {
        "IsProd": { "Fn::Equals": [ { "Ref": "Stage" }, "PROD" ] },
        "IsCode": { "Fn::Equals": [ { "Ref": "Stage" }, "CODE" ] }
    },

    "Resources": {

        "LB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": true,
                "Listeners": [ {
                    "Protocol": "HTTP",
                    "LoadBalancerPort": "80",
                    "InstancePort": "80"
                } ],
                "HealthCheck": {
                    "Target": "HTTP:80/healthcheck",
                    "Timeout": "5",
                    "Interval": "10",
                    "UnhealthyThreshold": "5",
                    "HealthyThreshold": "2"
                },
                "Subnets": { "Ref": "PublicVpcSubnets" },
                "SecurityGroups": [
                    { "Ref": "LBSG" }
                ]
            }
        },

        "AutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "VPCZoneIdentifier": { "Ref": "PublicVpcSubnets" },
                "LaunchConfigurationName": { "Ref": "LaunchConfig" },
                "MinSize": { "Ref": "Capacity" },
                "MaxSize": { "Ref": "Capacity" },
                "DesiredCapacity": { "Ref": "Capacity" },
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [ { "Ref": "LB" } ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": { "Ref": "Stage" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Stack",
                        "Value": { "Ref": "Stack" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "App",
                        "Value": { "Ref": "App" },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "", [ { "Ref": "App" }, "-", { "Ref": "Stage" } ] ] },
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },

        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": { "Ref": "PackerAMI" },
                "SecurityGroups": [ { "Ref": "SecGroup" }, { "Ref": "LBSG" } ],
                "InstanceType": { "Ref": "InstanceType" },
                "IamInstanceProfile": { "Ref": "InstanceProfile" },
                "AssociatePublicIpAddress": "True",
                "KeyName": { "Ref": "KeyName" },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [ "\n", [
                            "#!/bin/bash -ev",
                            "bash -x /usr/local/sbin/parking-lot-sync"
                        ] ]
                    }
                }
            }
        },

        "LBSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": { "Ref": "VpcId" },
                "GroupDescription": "Loadbalancer Security Group",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "SecGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Instance Security Group",
                "VpcId": { "Ref": "VpcId" },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": { "Ref": "LBSG" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "77.91.248.0/21"
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "ec2.amazonaws.com" ]
                            }
                        }
                    ]
                }
            }
        },

        "ConfigBucketPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "ConfigBucketPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [ "s3:GetObject" ],
                            "Effect": "Allow",
                            "Resource": [
                                { "Fn::Join": [ "", 
                                    [ "arn:aws:s3:::", { "Ref" : "ConfigBucket" }, "/*" ] ]
                                }
                            ]
                        }
                    ]
                },
                "Roles": [ { "Ref": "InstanceRole" } ]
            }
        },

        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ { "Ref": "InstanceRole" } ]
            }
        },

        "HighLatencyAlert": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": { "Fn::Join": ["-", [ { "Ref": "App" }, { "Ref": "Stage" }, "latency", "alert" ] ] },
                "AlarmDescription": "Average latency is >= 1s for a 3 minute period",
                "Namespace": "AWS/ELB",
                "Dimensions": [ { "Name": "LoadBalancerName", "Value": { "Ref": "LB" } } ],
                "MetricName": "Latency",
                "Statistic": "Average",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "Threshold": "1",
                "Period": "60",
                "EvaluationPeriods": "3",
                "AlarmActions": { "Fn::If": [ "IsProd", [ { "Ref": "AlarmSNS" } ], { "Ref" : "AWS::NoValue" } ] }
            }
        },

        "High5xxAlert": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": { "Fn::Join": ["-", [ { "Ref": "App" }, { "Ref": "Stage" }, "5xx", "alert" ] ] },
                "AlarmDescription": "Number of 5XXs is >= 10 for a 1 minute period",
                "Namespace": "AWS/ELB",
                "Dimensions": [ { "Name": "LoadBalancerName", "Value": { "Ref": "LB" } } ],
                "MetricName": "HTTPCode_Backend_5XX",
                "Statistic": "Sum",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "Threshold": "1000",
                "Period": "60",
                "EvaluationPeriods": "1",
                "AlarmActions": { "Fn::If": [ "IsProd", [ { "Ref": "AlarmSNS" } ], { "Ref" : "AWS::NoValue" } ] }
            }
        },

        "UnhealthyAlarmAlert": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": { "Fn::Join": ["-", [ { "Ref": "App" }, { "Ref": "Stage" }, "unhealthy", "hosts" ] ] },
                "AlarmDescription": "Number of healthy hosts <= 1 for a 1 minute period",
                "Namespace": "AWS/ELB",
                "Dimensions": [ { "Name": "LoadBalancerName", "Value": { "Ref": "LB" } } ],
                "MetricName": "HealthyHostCount",
                "Statistic": "Average",
                "ComparisonOperator": "LessThanOrEqualToThreshold",
                "Threshold": "1",
                "Period": "60",
                "EvaluationPeriods": "1",
                "AlarmActions": { "Fn::If": [ "IsProd", [ { "Ref": "AlarmSNS" } ], { "Ref" : "AWS::NoValue" } ] }
            }
        }

    }

}
